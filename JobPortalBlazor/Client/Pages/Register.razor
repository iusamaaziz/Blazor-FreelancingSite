@page "/register"
@using JobPortalBlazor.Shared
@inject Uploader uploader
@inject UserServices userService
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider
<AuthorizeView>
    <NotAuthorized>
        <h3>Register Page</h3>
        <hr />
        <div class="row">
            <div class="col-12 col-sm-10 col-md-8 col-lg-6 p-2 mx-auto border">
                <EditForm Model="@user" OnValidSubmit="OnSubmit">
                    <ChildContent Context="new_name">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <ValidationSummary></ValidationSummary>
                        <label for="name">Your Name</label>
                        <InputText @bind-Value="user.UserName" class="form-control mb-3"></InputText>
                        <label for="email">Your Email</label>
                        <InputText type="email" @bind-Value="user.UserEmail" class="form-control mb-3"></InputText>
                        <label for="password">Your Password</label>
                        <input type="password" @onchange="@((_)=> { password = _.Value.ToString(); })" class="form-control mb-3" />
                        <label for="email">Your Image</label>
                        <InputFile OnChange="handleFileChange" class="form-control mb-3"></InputFile>
                        <input type="submit" value="Register" class="btn btn-primary" />

                        <label class="text-danger">@error</label>
                    </ChildContent>
                </EditForm>
            </div>
        </div>
    </NotAuthorized>
    <Authorized><Index></Index></Authorized>
</AuthorizeView>
@code {
    [Required]
    public String password = "";
    public Models.User user = new Models.User();
    public String success = "";

    RegisterParameters registerParameters { get; set; } = new RegisterParameters();

    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            registerParameters.UserName = user.UserName;
            registerParameters.Password = password;
            registerParameters.ImageUrl = await uploader.UploadFile(user.Image);
            registerParameters.UserEmail = user.UserEmail;

            await authStateProvider.Register(registerParameters);
            MainLayout.current_user = await userService.GetCurrentUser();
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    public void handleFileChange(InputFileChangeEventArgs e)
    {
        user.Image = e.File;
    }

}
