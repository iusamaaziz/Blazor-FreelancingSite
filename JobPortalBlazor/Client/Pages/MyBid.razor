@page "/client/my-request"
@inject RequestServices reqService
<ClientHeader></ClientHeader>
<h3 class="my-2">My Requests</h3>
<a @onclick="@((_)=> { show = true; })" class="btn btn-primary my-2">Add request</a>
<RequestForm show="@show" click="@((_)=> { show = false; })" request="@req" onsubmit="@(async(request)=> { await AddRequest(request); })"></RequestForm>
<div class="row">
    @foreach (PurchaseRequest cat in purchaseRequests)
    {
        <RequestCard dashboard="true" request="@cat" UpdateEvent="@((r) => { UpdateBtnClick(r); })" DeleteEvent="DeleteRequest"></RequestCard>
    }
</div>
@code {
    List<PurchaseRequest> purchaseRequests = new List<PurchaseRequest>();
    bool show = false;
    PurchaseRequest req = new PurchaseRequest { user = MainLayout.current_user, UserID = MainLayout.current_user.UserID };
    public  async Task AddRequest(PurchaseRequest request)
    {
        if (request.RequestID == 0)
        {
            PurchaseRequest g = await reqService.addRequest(request);
            purchaseRequests.Add(g);
        }
        else
        {
            for (int i = 0; i < purchaseRequests.Count; i++)
            {
                if (purchaseRequests[i].RequestID == request.RequestID)
                {
                    purchaseRequests[i] = await reqService.updateRequest(request);
                    break;
                }
            }
        }
        req = new PurchaseRequest { user = MainLayout.current_user, UserID = MainLayout.current_user.UserID };
        show = false;
    }
    public async Task DeleteRequest(PurchaseRequest request)
    {
        await reqService.deleteRequest(request);
        purchaseRequests.Remove(request);
    }
    public void UpdateBtnClick(PurchaseRequest request)
    {
        show = true;
        req = new PurchaseRequest { RequestID = request.RequestID, category = request.category, Image = request.Image, CategoryID = request.CategoryID, Description = request.Description, ImageUrl = request.ImageUrl, Price = request.Price, user = request.user, UserID = request.UserID, PriceInterval = request.PriceInterval, Subject = request.Subject };
    }
    protected async override Task OnInitializedAsync()
    {
        purchaseRequests = await reqService.getMyRequest(MainLayout.current_user.UserID);
        await base.OnInitializedAsync();
    }

}
